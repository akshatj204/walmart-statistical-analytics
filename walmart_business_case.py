# -*- coding: utf-8 -*-
"""Walmart - Business Case.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nh4AvGrS9ZAVGchbN3u2kQr0hsHiCOda
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats

walmart_df = pd.read_csv('walmart_data.txt')
walmart_df

"""## Checking the Data"""

walmart_df.shape

walmart_df.describe()

walmart_df.dtypes

## Checking for Null Data

walmart_df.isnull().value_counts()##No Null Data

walmart_df.dropna(inplace=True)
walmart_df.isnull().value_counts()##No Null Data

"""## Outliers Detection

### Purchases and Age Groups
"""

df_purchase = walmart_df[['User_ID', 'Purchase']]
df_purchase

df_purchase_age = walmart_df[['User_ID','Purchase', 'Age']]
df_purchase_age.sort_values(by = 'Age').reset_index(drop = True)

plt.figure(figsize=(10,5))
sns.boxplot(data = df_purchase_age, x = 'Purchase', y = 'Age', color = 'Green')
plt.xticks(ticks=range(0, 25000, 2500))
plt.show()

"""### Purchases and Marital Status"""

df_purchase_marriage = walmart_df[['User_ID', 'Purchase', 'Marital_Status']]
df_purchase_marriage

# df_purchase_marriage = df_purchase_marriage.groupby(['User_ID', 'Marital_Status']).sum().reset_index()
# df_purchase_marriage

plt.figure(figsize = (15,5))
sns.boxplot(data = df_purchase_marriage, x = 'Purchase', hue = 'Marital_Status')
plt.xticks(ticks=range(0, 25000, 2500))
plt.show()

"""### Purchases and Gender"""

df_purchase_gender = walmart_df[['User_ID', 'Purchase', 'Gender']]
df_purchase_gender

sns.boxplot(data = df_purchase_gender, x = 'Purchase', hue = 'Gender')
plt.show()

"""### Purchases and City Category"""

df_purchases_city_cat = walmart_df[['User_ID', 'Purchase', 'City_Category']]
df_purchases_city_cat

sns.boxplot(data = df_purchases_city_cat, x = 'Purchase', hue = 'City_Category')
plt.legend(loc='upper right', bbox_to_anchor=(1, 1))
plt.title('Boxplot showing purchases across cities')
plt.tight_layout()
plt.show()

"""## Statistical Analysis - Gender

### Population Mean
"""

df_mean_gender = round(df_purchase_gender.groupby('Gender').mean().reset_index(),2)
df_mean_gender.drop(columns = 'User_ID', inplace = True)
df_mean_gender.rename(columns = {'Purchase': 'Mean Purchase'}, inplace=True)
df_mean_gender

import scipy.stats as stats
from scipy.stats import norm

## Average Male purchase expense is higher in comparison to Female.

df_mean_std = round(df_purchase_gender.groupby('Gender').agg({'Purchase':['mean', 'std']}),2).reset_index()
df_mean_std

round(df_purchase_gender.agg({'Purchase':['mean', 'std']}),2).reset_index()

"""### Sample Mean - Sample Size 50000"""

df_gender_sample = df_purchase_gender.sample(50000)
df_gender_sample

df_gender_sample_mean = round(df_gender_sample.groupby('Gender').mean().reset_index(),2)
df_gender_sample_mean.drop(columns ='User_ID', inplace = True)

female_sample_mean = round(np.mean(df_purchase_gender['Purchase']),2)
female_sample_mean

female_sample_std = np.std(df_gender_sample['Purchase'],  ddof=1)
female_sample_std

n = 50000 # Sample size

## assuming a confidence interval of 95%.

confidence = 0.95
z_score = norm.ppf(1 - (1 - confidence) / 2)
z_score

margin_of_error = round(z_score * (female_sample_std/ np.sqrt(n)),2)
margin_of_error

lower_bound = female_sample_mean - margin_of_error
upper_bound = female_sample_mean + margin_of_error

print(f"95% Confidence Interval: ({lower_bound:.2f}, {upper_bound:.2f})")

"""### Sample Mean and Std - Sample Size 5000"""

df_gender_small_sample = df_purchase_gender.sample(5000)
df_gender_small_sample.Purchase.value_counts().sort_values()

female_small_sample_mean =  np.mean(df_gender_small_sample['Purchase'])
female_small_sample_mean

female_small_sample_std = np.std(df_gender_small_sample['Purchase'],  ddof=1)
female_small_sample_std

n_small = 5000

margin_of_error_5000 = round(z_score * (female_small_sample_std/ np.sqrt(n_small)),2)
margin_of_error_5000

lower_bound = female_small_sample_mean - margin_of_error_5000
upper_bound = female_small_sample_mean + margin_of_error_5000

print(f"95% Confidence Interval: ({lower_bound:.2f}, {upper_bound:.2f})")

"""### Sample Mean and Std - Sample Size 100000"""

df_gender_large_sample = df_purchase_gender.sample(100000)
df_gender_large_sample

female_large_sample_mean =  np.mean(df_gender_large_sample['Purchase'])
female_large_sample_mean

female_large_sample_std = np.std(df_gender_small_sample['Purchase'],  ddof=1)
female_large_sample_std

n_large = 100000

margin_of_error_100000 = round(z_score * (female_large_sample_std/ np.sqrt(n_large)),2)
margin_of_error_100000

lower_bound = female_large_sample_mean - margin_of_error_100000
upper_bound = female_large_sample_mean + margin_of_error_100000

print(f"95% Confidence Interval: ({lower_bound:.2f}, {upper_bound:.2f})")

"""## CLT

### All customers
"""

sample_size = 5000
num_samples = 1000

sample_5000 = [np.mean(np.random.choice(df_gender_small_sample['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_5000, fill = True, legend = False)
plt.title('KDE Plot with Sample Size 5000')
plt.show()

# Interval is 9100 to 9700

sample_size = 50000
num_samples = 1000

sample_50000 = [np.mean(np.random.choice(df_gender_sample['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_50000, fill = True)
plt.title('KDE Plot with Sample Size 50000')
plt.legend().set_visible(False)
plt.show()

sample_size = 10000
num_samples = 1000

sample_10000 = [np.mean(np.random.choice(df_purchase_gender['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_10000, fill = True)
plt.title('KDE Plot with Sample Size 10000')
plt.legend().set_visible(False)
plt.show()

"""### Only Males"""

df_purchase_male = df_purchase_gender[df_purchase_gender['Gender'] == 'M']
df_purchase_male

sample_size = 5000
num_samples = 1000

sample_male_5000 = [np.mean(np.random.choice(df_purchase_male['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_male_5000, fill = True, legend = False)
plt.title('Male - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000
sample_male_50000 = [np.mean(np.random.choice(df_purchase_male['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_male_50000, fill = True, legend = False)
plt.title('Male - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000
sample_male_10000 = [np.mean(np.random.choice(df_purchase_male['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_male_10000, fill = True, legend = False)
plt.title('Male - KDE Plot with Sample Size 10000')
plt.show()

"""### Only Female"""

df_purchase_female = df_purchase_gender[df_purchase_gender['Gender'] == 'F']
df_purchase_female

sample_size = 5000
num_samples = 1000
sample_female_5000 = [np.mean(np.random.choice(df_purchase_female['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_female_5000, fill = True, legend = False)
plt.title('Female - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000
sample_female_50000 = [np.mean(np.random.choice(df_purchase_female['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_female_50000, fill = True, legend = False)
plt.title('Female - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000
sample_female_10000 = [np.mean(np.random.choice(df_purchase_female['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_female_10000, fill = True, legend = False)
plt.title('Female - KDE Plot with Sample Size 10000')
plt.show()

"""## Confidence Interval"""

## We will use the sample size of 50000

std_error_male = np.std(df_purchase_male['Purchase'])/(50000**0.5)
std_error_male

mean_male_pop = np.mean(df_purchase_male['Purchase'])
mean_male_pop

mean_female_pop = np.mean(df_purchase_female['Purchase'])
mean_female_pop

std_error_female = np.std(df_purchase_female['Purchase'])/(50000**0.5)
std_error_female

# z = (mean_male_pop - mean_female_pop) / np.sqrt(((std_error_male)**2 / 50000) + ((std_error_female)**2 / 50000))
# print(f"Z-score: {z:.2f}")

"""### CI of 95% - Male"""

ci_95_male = norm.interval(0.95, loc = mean_male_pop, scale =std_error_male)
ci_95_male

"""### CI of 95% - Female"""

ci_95_female = norm.interval(0.95, loc = mean_female_pop, scale =std_error_female)
ci_95_female

"""### CI of 90% - Male"""

ci_90_male = norm.interval(0.90, loc = mean_male_pop, scale =std_error_male)
ci_90_male

"""### CI of 90% - Female"""

ci_90_female = norm.interval(0.90, loc = mean_female_pop, scale =std_error_female)
ci_90_female

"""### CI of 99% - Male"""

ci_99_male = norm.interval(0.99, loc = mean_male_pop, scale =std_error_male)
ci_99_male

"""### CI of 99% - Female"""

ci_99_female = norm.interval(0.99, loc = mean_female_pop, scale =std_error_female)
ci_99_female

df_gender = pd.DataFrame([ci_99_male, ci_99_female, ci_90_male,ci_90_female,ci_95_male,ci_95_female ], columns=['Lower Bound', 'Upper Bound'],index=['99% CI Male','99% CI Female','90% CI Male','90% CI Female', '95% CI Male', '95% CI Female'  ])
df_gender =  round(df_gender,0)
df_gender

df_gender['Midpoint'] = (df_gender['Lower Bound'] + df_gender['Upper Bound']) / 2
df_gender['Error'] = (df_gender['Upper Bound'] - df_gender['Lower Bound']) / 2

# Plot
plt.figure(figsize=(10, 6))
plt.errorbar(df_gender['Midpoint'], df_gender.index, xerr=df_gender['Error'], fmt='o', capsize=5, color='teal')
plt.xlabel('Confidence Interval Range')
plt.title('Comparison of Confidence Intervals (CI) by Gender')
plt.grid(True, axis='x', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

"""## Statistical Analysis - Married/Unmarried

## Population Mean and Std dev
"""

df_purchase_marriage = walmart_df[['User_ID', 'Purchase', 'Marital_Status']]
df_purchase_marriage

mean_purchase_marriage= np.mean(df_purchase_marriage['Purchase'])
mean_purchase_marriage

std_purchase_marriage = np.std(df_purchase_marriage['Purchase'])
std_purchase_marriage

df_purchase_married = df_purchase_marriage[df_purchase_marriage['Marital_Status'] == 1]
df_purchase_married

mean_married = np.mean(df_purchase_married['Purchase'])
mean_married

std_married = np.std(df_purchase_married['Purchase'])
std_married

df_purchase_unmarried = df_purchase_marriage[df_purchase_marriage['Marital_Status'] == 0]
df_purchase_unmarried

mean_unmarried = np.mean(df_purchase_unmarried['Purchase'])
mean_unmarried

std_unmarried = np.std(df_purchase_unmarried['Purchase'])
std_unmarried

mean_marriage_df = pd.DataFrame({'Particulars': ['mean_purchase_marriage', 'std_purchase_marriage','mean_married', 'std_married', 'mean_unmarried', 'std_unmarried'], 'Values':[mean_purchase_marriage,std_purchase_marriage,mean_married,std_married,mean_unmarried,std_unmarried] })
mean_marriage_df

plt.figure(figsize=(14,5))
sns.barplot(data = mean_marriage_df, x = 'Particulars', y = 'Values', color = 'green')
plt.show()

"""## Sample Mean and Std - Sample Size 5000"""

df_marriage_sample_5000 = df_purchase_marriage.sample(5000)
df_marriage_sample_5000

print((np.mean(df_marriage_sample_5000['Purchase'])), (np.std(df_marriage_sample_5000['Purchase'])))

df_married_sample_5000 = df_purchase_married.sample(5000)
df_married_sample_5000

print(np.mean(df_married_sample_5000['Purchase']), np.std(df_married_sample_5000['Purchase']))

print(np.mean(df_purchase_unmarried['Purchase'].sample(5000)), np.std(df_purchase_unmarried['Purchase'].sample(5000)))

"""## Sample Mean and Std - Sample Size 50000"""

df_marriage_sample_50000 = df_purchase_marriage.sample(50000)
df_marriage_sample_50000

"""## CLT

### Only Married
"""

sample_size = 5000
num_samples = 1000

sample_married_5000 = [np.mean(np.random.choice(df_purchase_married['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_married_5000, fill = True, legend = False)
plt.title('Married - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000

sample_married_50000 = [np.mean(np.random.choice(df_purchase_married['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_married_50000, fill = True, legend = False)
plt.title('Married - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000

sample_married_10000 = [np.mean(np.random.choice(df_purchase_married['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_married_10000, fill = True, legend = False)
plt.title('Married - KDE Plot with Sample Size 10000')
plt.show()

"""### Only Unmarried"""

sample_size = 5000
num_samples = 1000

sample_unmarried_5000 = [np.mean(np.random.choice(df_purchase_unmarried['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_unmarried_5000, fill = True, legend = False)
plt.title('Unmarried - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000

sample_unmarried_50000 = [np.mean(np.random.choice(df_purchase_unmarried['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_unmarried_50000, fill = True, legend = False)
plt.title('Unmarried - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000

sample_unmarried_10000 = [np.mean(np.random.choice(df_purchase_unmarried['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_unmarried_10000, fill = True, legend = False)
plt.title('Unmarried - KDE Plot with Sample Size 10000')
plt.show()

"""## Confidence Interval"""

std_error_married = np.std(df_purchase_married['Purchase'])/(50000**0.5)
std_error_married

mean_married_pop = np.mean(df_purchase_married['Purchase'])
mean_married_pop

std_error_unmarried = np.std(df_purchase_unmarried['Purchase'])/(50000**0.5)
std_error_unmarried

mean_unmarried_pop = np.mean(df_purchase_married['Purchase'])
mean_unmarried_pop

"""### CI of 95% - Married"""

ci_95_married = norm.interval(0.95, loc = mean_married_pop, scale = std_error_married)
ci_95_married

"""### CI of 95% - Unmarried"""

ci_95_unmarried = norm.interval(0.95, loc = mean_unmarried_pop, scale = std_error_unmarried)
ci_95_unmarried

"""### CI of 90% - Married"""

ci_90_married = norm.interval(0.90, loc = mean_married_pop, scale = std_error_married)
ci_90_married

"""### CI of 90% - Unmarried"""

ci_90_unmarried = norm.interval(0.90, loc = mean_unmarried_pop, scale = std_error_unmarried)
ci_90_unmarried

"""### CI of 99% - Married"""

ci_99_married = norm.interval(0.99, loc = mean_married_pop, scale = std_error_married)
ci_99_married

"""### CI of 99% - Unmarried"""

ci_99_unmarried = norm.interval(0.99, loc = mean_unmarried_pop, scale = std_error_unmarried)
ci_99_unmarried



"""### Visualizing the Confidence Interval Results"""

df = pd.DataFrame([ci_99_married, ci_99_unmarried, ci_90_married,ci_90_unmarried,ci_95_married,ci_95_unmarried ], columns=['Lower Bound', 'Upper Bound'],index=['99% CI Married','99% CI Unmarried','90% CI Married','90% CI Unmarried', '95% CI Married', '95% CI Unmarried'  ])
df =  round(df,0)
df

df['Midpoint'] = (df['Lower Bound'] + df['Upper Bound']) / 2
df['Error'] = (df['Upper Bound'] - df['Lower Bound']) / 2

# Plot
plt.figure(figsize=(10, 6))
plt.errorbar(df['Midpoint'], df.index, xerr=df['Error'], fmt='o', capsize=5, color='teal')
plt.xlabel('Confidence Interval Range')
plt.title('Comparison of Confidence Intervals (CI) by Marital Status')
plt.grid(True, axis='x', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

# ci_marriage_df = pd.DataFrame({'Particulars': ['ci_95_married', 'ci_95_unmarried','ci_90_married', 'ci_90_unmarried', 'ci_99_married', 'ci_99_unmarried'], 'Values':[ci_95_married,ci_95_unmarried,ci_90_married,ci_90_unmarried,ci_99_married,ci_99_unmarried,ci_90_married,ci_90_unmarried,ci_99_married, ci_99_unmarried] })
# ci_marriage_df

"""## Statistical Analysis - Age

### Population Mean and Std Dev
"""

df_purchase_age

mean_age_pop = np.mean(df_purchase_age['Purchase'])
mean_age_pop

std_age_pop = np.std(df_purchase_age['Purchase'])
std_age_pop

df_purchase_age.Age.unique()

df_purchase_age_0_17 = df_purchase_age[df_purchase_age['Age'] == '0-17']
mean_age_pop_0_17 = np.mean(df_purchase_age_0_17['Purchase'])
std_age_pop_0_17 = np.std(df_purchase_age_0_17['Purchase'])
print(mean_age_pop_0_17, std_age_pop_0_17)

df_purchase_age_18_25 = df_purchase_age[df_purchase_age['Age'] == '18-25']
mean_age_pop_18_25 = np.mean(df_purchase_age_18_25['Purchase'])
std_age_pop_18_25 = np.std(df_purchase_age_18_25['Purchase'])
print(mean_age_pop_18_25, std_age_pop_18_25)

df_purchase_age_26_35 = df_purchase_age[df_purchase_age['Age'] == '26-35']
mean_age_pop_26_35 = np.mean(df_purchase_age_26_35['Purchase'])
std_age_pop_26_35 = np.std(df_purchase_age_26_35['Purchase'])
print(mean_age_pop_26_35, std_age_pop_26_35)

df_purchase_age_36_45 = df_purchase_age[df_purchase_age['Age'] == '36-45']
mean_age_pop_36_45 = np.mean(df_purchase_age_36_45['Purchase'])
std_age_pop_36_45 = np.std(df_purchase_age_36_45['Purchase'])
print(mean_age_pop_36_45, std_age_pop_36_45)

df_purchase_age_46_50 = df_purchase_age[df_purchase_age['Age'] == '46-50']
mean_age_pop_46_50 = np.mean(df_purchase_age_46_50['Purchase'])
std_age_pop_46_50 = np.std(df_purchase_age_46_50['Purchase'])
print(mean_age_pop_46_50, std_age_pop_46_50)

df_purchase_age_51_55 = df_purchase_age[df_purchase_age['Age'] == '51-55']
mean_age_pop_51_55 = np.mean(df_purchase_age_51_55['Purchase'])
std_age_pop_51_55 = np.std(df_purchase_age_51_55['Purchase'])
print(mean_age_pop_51_55, std_age_pop_51_55)

df_purchase_age_55p = df_purchase_age[df_purchase_age['Age'] == '55+']
mean_age_pop_55p = np.mean(df_purchase_age_55p['Purchase'])
std_age_pop_55p = np.std(df_purchase_age_55p['Purchase'])
print(mean_age_pop_55p, std_age_pop_55p)

df_purchase_age.dropna(inplace=True)
df_purchase_age

df = pd.DataFrame([mean_age_pop, std_age_pop,mean_age_pop_0_17,std_age_pop_0_17,mean_age_pop_18_25,std_age_pop_18_25,mean_age_pop_26_35,std_age_pop_26_35,mean_age_pop_36_45,std_age_pop_36_45,mean_age_pop_46_50,std_age_pop_46_50,mean_age_pop_51_55,std_age_pop_51_55,mean_age_pop_55p,std_age_pop_55p ], columns=['Value'],index=['Population - Mean','Population - Std dev','Mean Age 0-17','Std dev Age 0-17', 'Mean Age 18-25', 'Std dev Age 18-25','Mean Age 26-35', 'Std dev Age 26-35', 'Mean Age 36-45', 'Std dev Age 36-45', 'Mean Age 46-50','Std dev Age 46-50','Mean Age 51-55', 'Std dev Age 51-55', 'Mean Age 55+','Std dev Age 55+' ])
df =  round(df,0)
df

"""## CLT

### Age Bracket 0-17
"""

sample_size = 5000
num_samples = 1000


sample_0_17_5000 = [np.mean(np.random.choice(df_purchase_age_0_17['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_0_17_5000, fill = True, legend = False)
plt.title('Age 0-17 - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000


sample_0_17_50000 = [np.mean(np.random.choice(df_purchase_age_0_17['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_0_17_50000, fill = True, legend = False)
plt.title('Age 0-17 - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000


sample_0_17_10000 = [np.mean(np.random.choice(df_purchase_age_0_17['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_0_17_10000, fill = True, legend = False)
plt.title('Age 0-17 - KDE Plot with Sample Size 10000')
plt.show()

"""### Age Bracket 18-25"""

sample_size = 5000
num_samples = 1000


sample_18_25_5000 = [np.mean(np.random.choice(df_purchase_age_18_25['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_18_25_5000, fill = True, legend = False)
plt.title('Age 18-25 - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000


sample_18_25_50000 = [np.mean(np.random.choice(df_purchase_age_18_25['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_18_25_50000, fill = True, legend = False)
plt.title('Age 18-25 - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000


sample_18_25_10000 = [np.mean(np.random.choice(df_purchase_age_18_25['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_18_25_10000, fill = True, legend = False)
plt.title('Age 18-25 - KDE Plot with Sample Size 10000')
plt.show()

"""### Age Bracket 26-35"""

sample_size = 5000
num_samples = 1000


sample_26_35_5000 = [np.mean(np.random.choice(df_purchase_age_26_35['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_26_35_5000, fill = True, legend = False)
plt.title('Age 26-35 - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000


sample_26_35_50000 = [np.mean(np.random.choice(df_purchase_age_26_35['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_26_35_50000, fill = True, legend = False)
plt.title('Age 26-35 - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000


sample_26_35_10000 = [np.mean(np.random.choice(df_purchase_age_26_35['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_26_35_10000, fill = True, legend = False)
plt.title('Age 26-35 - KDE Plot with Sample Size 50000')
plt.show()

"""### Age Bracket 36-45"""

sample_size = 5000
num_samples = 1000


sample_36_45_5000 = [np.mean(np.random.choice(df_purchase_age_36_45['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_36_45_5000, fill = True, legend = False)
plt.title('Age 36-45 - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000


sample_36_45_50000 = [np.mean(np.random.choice(df_purchase_age_36_45['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_36_45_50000, fill = True, legend = False)
plt.title('Age 36-45 - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000


sample_36_45_10000 = [np.mean(np.random.choice(df_purchase_age_36_45['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_36_45_10000, fill = True, legend = False)
plt.title('Age 36-45 - KDE Plot with Sample Size 50000')
plt.show()

"""### Age Bracket 46-50"""

sample_size = 5000
num_samples = 1000


sample_46_50_5000 = [np.mean(np.random.choice(df_purchase_age_46_50['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_46_50_5000, fill = True, legend = False)
plt.title('Age 46-50 - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 5000
num_samples = 1000


sample_46_50_5000 = [np.mean(np.random.choice(df_purchase_age_46_50['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_46_50_5000, fill = True, legend = False)
plt.title('Age 46-50 - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000


sample_46_50_50000 = [np.mean(np.random.choice(df_purchase_age_46_50['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_46_50_50000, fill = True, legend = False)
plt.title('Age 46-50 - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000


sample_46_50_10000 = [np.mean(np.random.choice(df_purchase_age_46_50['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_46_50_10000, fill = True, legend = False)
plt.title('Age 46-50 - KDE Plot with Sample Size 10000')
plt.show()

"""### Age Bracket 51-55"""

sample_size = 5000
num_samples = 1000


sample_51_55_5000 = [np.mean(np.random.choice(df_purchase_age_51_55['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_51_55_5000, fill = True, legend = False)
plt.title('Age 51-55 - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000


sample_51_55_50000 = [np.mean(np.random.choice(df_purchase_age_51_55['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_51_55_50000, fill = True, legend = False)
plt.title('Age 51-55 - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000


sample_51_55_10000 = [np.mean(np.random.choice(df_purchase_age_51_55['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_51_55_10000, fill = True, legend = False)
plt.title('Age 51-55 - KDE Plot with Sample Size 10000')
plt.show()

"""### Age Bracket 55 plus"""

sample_size = 5000
num_samples = 1000


sample_55p_5000 = [np.mean(np.random.choice(df_purchase_age_55p['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_55p_5000, fill = True, legend = False)
plt.title('Age 55 plus - KDE Plot with Sample Size 5000')
plt.show()

sample_size = 50000
num_samples = 1000


sample_55p_50000 = [np.mean(np.random.choice(df_purchase_age_55p['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_55p_50000, fill = True, legend = False)
plt.title('Age 55 plus - KDE Plot with Sample Size 50000')
plt.show()

sample_size = 10000
num_samples = 1000


sample_55p_10000 = [np.mean(np.random.choice(df_purchase_age_55p['Purchase'], sample_size, replace = True)) for i in range(num_samples)]
sns.kdeplot(data =sample_55p_10000, fill = True, legend = False)
plt.title('Age 55 plus - KDE Plot with Sample Size 10000')
plt.show()

"""## Confidence Interval"""

std_error_0_17 = np.std(df_purchase_age_0_17['Purchase'])/(50000**0.5)
std_error_0_17

std_error_18_25 = np.std(df_purchase_age_18_25['Purchase'])/(50000**0.5)
std_error_18_25

std_error_26_35 = np.std(df_purchase_age_26_35['Purchase'])/(50000**0.5)
std_error_26_35

std_error_36_45 = np.std(df_purchase_age_36_45['Purchase'])/(50000**0.5)
std_error_36_45

std_error_46_50 = np.std(df_purchase_age_46_50['Purchase'])/(50000**0.5)
std_error_46_50

std_error_51_55 = np.std(df_purchase_age_51_55['Purchase'])/(50000**0.5)
std_error_51_55

std_error_55p = np.std(df_purchase_age_55p['Purchase'])/(50000**0.5)
std_error_55p

# df = pd.DataFrame([mean_age_pop, std_age_pop,mean_age_pop_0_17,std_age_pop_0_17,mean_age_pop_18_25,std_age_pop_18_25,mean_age_pop_26_35,std_age_pop_26_35,mean_age_pop_36_45,std_age_pop_36_45,mean_age_pop_46_50,std_age_pop_46_50,mean_age_pop_51_55,std_age_pop_51_55,mean_age_pop_55p,std_age_pop_55p ], columns=['Value'],index=['Population - Mean','Population - Std dev','Mean Age 0-17','Std dev Age 0-17', 'Mean Age 18-25', 'Std dev Age 18-25','Mean Age 26-35', 'Std dev Age 26-35', 'Mean Age 36-45', 'Std dev Age 36-45', 'Mean Age 46-50','Std dev Age 46-50','Mean Age 51-55', 'Std dev Age 51-55', 'Mean Age 55+','Std dev Age 55+' ])
# df =  round(df,0)
# df

"""### CI of 95% - Age Bracket 0-17"""

ci_95_0_17 = norm.interval(0.95, loc = mean_age_pop_0_17, scale = std_error_0_17)
ci_95_0_17

"""### CI of 95% - Age Bracket 18-25"""

ci_95_18_25 = norm.interval(0.95, loc = mean_age_pop_18_25, scale = std_error_18_25)
ci_95_18_25

"""### CI of 95% - Age Bracket 26-35"""

ci_95_26_35 = norm.interval(0.95, loc = mean_age_pop_26_35, scale = std_error_26_35)
ci_95_26_35

"""### CI of 95% - Age Bracket 36 - 45"""

ci_95_36_45 = norm.interval(0.95, loc = mean_age_pop_36_45, scale = std_error_36_45)
ci_95_36_45

"""### CI of 95% - Age Bracket 46-50"""

ci_95_46_50 = norm.interval(0.95, loc = mean_age_pop_46_50, scale = std_error_46_50)
ci_95_46_50

"""### CI of 95% - Age Bracket 51-55"""

ci_95_51_55 = norm.interval(0.95, loc = mean_age_pop_51_55, scale = std_error_51_55)
ci_95_51_55

"""### CI of 95% - Age Bracket 55+"""

ci_95_55p = norm.interval(0.95, loc = mean_age_pop_55p, scale = std_error_55p)
ci_95_55p

"""### CI of 90% - Age Bracket 0-17"""

ci_90_0_17 = norm.interval(0.90, loc = mean_age_pop_0_17, scale = std_error_0_17)
ci_90_0_17

"""### CI of 90% - Age Bracket 18-25"""

ci_90_18_25 = norm.interval(0.90, loc = mean_age_pop_18_25, scale = std_error_18_25)
ci_90_18_25

"""### CI of 90% - Age Bracket 26-35"""

ci_90_26_35 = norm.interval(0.90, loc = mean_age_pop_26_35, scale = std_error_26_35)
ci_90_26_35

"""### CI of 90% - Age Bracket 36-45"""

ci_90_36_45 = norm.interval(0.90, loc = mean_age_pop_36_45, scale = std_error_36_45)
ci_90_36_45

"""### CI of 90% - Age Bracket 46-50"""

ci_90_46_50 = norm.interval(0.90, loc = mean_age_pop_46_50, scale = std_error_46_50)
ci_90_46_50

"""### CI of 90% - Age Bracket 51-55"""

ci_90_51_55 = norm.interval(0.90, loc = mean_age_pop_51_55, scale = std_error_51_55)
ci_90_51_55

"""### CI of 90% - Age Bracket 55+"""

ci_90_55p = norm.interval(0.90, loc = mean_age_pop_55p, scale = std_error_55p)
ci_90_55p

"""### CI of 99% - Age Bracket 0-17"""

ci_99_0_17 = norm.interval(0.99, loc = mean_age_pop_0_17, scale = std_error_0_17)
ci_99_0_17

"""### CI of 99% - Age Bracket 18-25"""

ci_99_18_25 = norm.interval(0.99, loc = mean_age_pop_18_25, scale = std_error_18_25)
ci_99_18_25

"""### CI of 99% - Age Bracket 26-35"""

ci_99_26_35 = norm.interval(0.99, loc = mean_age_pop_26_35, scale = std_error_26_35)
ci_99_26_35

"""### CI of 99% - Age Bracket 36-45"""

ci_99_36_45 = norm.interval(0.99, loc = mean_age_pop_36_45, scale = std_error_36_45)
ci_99_36_45

"""### CI of 99% - Age Bracket 46-50"""

ci_99_46_50 = norm.interval(0.99, loc = mean_age_pop_46_50, scale = std_error_46_50)
ci_99_46_50

"""### CI of 99% - Age Bracket 51-55"""

ci_99_51_55 = norm.interval(0.99, loc = mean_age_pop_51_55, scale = std_error_51_55)
ci_99_51_55

"""### CI of 99% - Age Bracket 55p"""

ci_99_55p = norm.interval(0.99, loc = mean_age_pop_55p, scale = std_error_55p)
ci_99_55p

"""## Visualizing the Confidence Interval Results"""

# df = pd.DataFrame([mean_age_pop, std_age_pop,mean_age_pop_0_17,std_age_pop_0_17,mean_age_pop_18_25,std_age_pop_18_25,mean_age_pop_26_35,std_age_pop_26_35,mean_age_pop_36_45,std_age_pop_36_45,mean_age_pop_46_50,std_age_pop_46_50,mean_age_pop_51_55,std_age_pop_51_55,mean_age_pop_55p,std_age_pop_55p ], columns=['Value'],index=['Population - Mean','Population - Std dev','Mean Age 0-17','Std dev Age 0-17', 'Mean Age 18-25', 'Std dev Age 18-25','Mean Age 26-35', 'Std dev Age 26-35', 'Mean Age 36-45', 'Std dev Age 36-45', 'Mean Age 46-50','Std dev Age 46-50','Mean Age 51-55', 'Std dev Age 51-55', 'Mean Age 55+','Std dev Age 55+' ])
# df =  round(df,0)
# df

df = pd.DataFrame([ci_95_0_17,ci_95_18_25,ci_95_26_35,ci_95_36_45,ci_95_46_50,ci_95_51_55,ci_95_55p,ci_90_0_17,ci_90_18_25,ci_90_26_35,ci_90_36_45,ci_90_46_50,ci_90_51_55,ci_90_55p,ci_99_0_17,ci_99_18_25,ci_99_26_35,ci_99_36_45,ci_99_46_50,ci_99_51_55,ci_99_55p], columns=['Lower Bound', 'Upper Bound'],index=['95% CI Age 0-17','95% CI Age 18-25','95% CI Age 26-35','95% CI Age 36-45', '95% CI Age 46-50', '95% CI Age 51-55','95% CI Age 55+', '90% CI Age 0-17','90% CI Age 18-25','90% CI Age 26-35','90% CI Age 36-45', '90% CI Age 46-50', '90% CI Age 51-55','90% CI Age 55+','99% CI Age 0-17','99% CI Age 18-25','99% CI Age 26-35','99% CI Age 36-45', '99% CI Age 46-50', '99% CI Age 51-55','99% CI Age 55+' ])
df =  round(df,0)
df

df['Midpoint'] = (df['Lower Bound'] + df['Upper Bound']) / 2
df['Error'] = (df['Upper Bound'] - df['Lower Bound']) / 2

# Plot
plt.figure(figsize=(10, 6))
plt.errorbar(df['Midpoint'], df.index, xerr=df['Error'], fmt='o', capsize=5, color='teal')
plt.xlabel('Confidence Interval Range')
plt.title('Comparison of Confidence Intervals (CI) by Age Groups')
plt.grid(True, axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

## This is done!!!